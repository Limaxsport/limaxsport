// ==========================================================
// === –§–Ü–ù–ê–õ–¨–ù–ò–ô –†–û–ë–û–ß–ò–ô –ö–û–î –í–û–†–û–ù–ö–ò –†–ï–Ñ–°–¢–†–ê–¶–Ü–á ===
// === v3.0 (–°—É–º—ñ—Å–Ω–∞ –≤–µ—Ä—Å—ñ—è + –Ω–∞–¥—ñ–π–Ω–∏–π –∑–∞–ø—É—Å–∫) ===
// ==========================================================

// --- –ß–ê–°–¢–ò–ù–ê 1: –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ---

const baseURL = 'https://limaxsport.top/testapi';

function setTokens(accessToken, refreshToken, expiresInSeconds) {
  localStorage.setItem('access_token', accessToken);
  if (refreshToken) {
    localStorage.setItem('refresh_token', refreshToken);
  }
  const now = new Date().getTime();
  const expiresInMs = (expiresInSeconds || 120 * 60) * 1000;
  const accessTokenExpiresAt = now + expiresInMs;
  localStorage.setItem(
    'access_token_expires_at',
    accessTokenExpiresAt.toString()
  );
}

function getAccessToken() {
  return localStorage.getItem('access_token');
}

async function fetchWithAuth(url, options = {}) {
  let token = getAccessToken();

  const headers = {
    ...options.headers,
    'Content-Type':
      (options.headers && options.headers['Content-Type']) ||
      'application/json',
  };

  let fetchOptions = { ...options, headers };

  if (token) {
    headers['Authorization'] = `Bearer ${token}`;
  }

  try {
    const response = await fetch(url, fetchOptions);
    const responseData = await response.json().catch(() => {
      if (response.ok) return null;
      return { detail: `–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}` };
    });
    return { data: responseData, response: response };
  } catch (error) {
    console.error(`fetchWithAuth: –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–ø–∏—Ç—É –¥–æ ${url}:`, error);
    throw error;
  }
}

/**
 * –ù–∞–¥—Å–∏–ª–∞—î –ø–æ–¥—ñ—é –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –≤–æ—Ä–æ–Ω–∫–∏ –Ω–∞ –±–µ–∫–µ–Ω–¥ (–±–µ–∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ).
 * @param {string} stepId - ID –∫—Ä–æ–∫—É (–Ω–∞–ø—Ä., 'welcome', 'goal', 'confirmation').
 * @param {string} eventType - –¢–∏–ø –ø–æ–¥—ñ—ó (–Ω–∞–ø—Ä., 'step_view', 'register_attempt', 'register_success').
 */
function trackFunnelEvent(stepId, eventType) {
  try {
    if (!funnelManager.state.funnelSessionId) {
      console.warn(
        '–ù–µ–º–æ–∂–ª–∏–≤–æ –≤—ñ–¥—Å—Ç–µ–∂–∏—Ç–∏ –ø–æ–¥—ñ—é: funnelSessionId —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.'
      );
      return;
    }

    const payload = {
      session_id: funnelManager.state.funnelSessionId,
      step_id: stepId,
      event_type: eventType,
    };

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fetch, –∞–ª–µ –Ω–µ –æ—á—ñ–∫—É—î–º–æ (await) –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.
    // –ú–∏ —Ç–∞–∫–æ–∂ –¥–æ–¥–∞—î–º–æ keepalive: true, —â–æ —î –∫—Ä–∏—Ç–∏—á–Ω–∏–º –¥–ª—è –ø–æ–¥—ñ–π,
    // —è–∫—ñ –≤—ñ–¥–±—É–≤–∞—é—Ç—å—Å—è –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º (register_success).
    fetch(`${baseURL}/analytics/funnel-event`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
      keepalive: true,
    }).catch((err) => {
      // –õ–æ–∫–∞–ª—å–Ω–æ –ª–æ–≤–∏–º–æ –ø–æ–º–∏–ª–∫—É, —â–æ–± –≤–æ–Ω–∞ –Ω–µ –∑–ª–∞–º–∞–ª–∞ –æ—Å–Ω–æ–≤–Ω–∏–π –ø–æ—Ç—ñ–∫
      console.warn(`–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ (${stepId}):`, err.message);
    });
  } catch (error) {
    console.warn('–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –ø–æ–º–∏–ª–∫–∞ trackFunnelEvent:', error.message);
  }
}

// –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–∞–π–º–µ—Ä—ñ–≤ –¥–ª—è –ø–æ–≤—ñ–ª—å–Ω–æ–≥–æ –∑'—î–¥–Ω–∞–Ω–Ω—è ---
const loadingTimerManager = {
  timerId: null,
  element: null,

  start(statusElement, timeout = 10000) {
    // –ó—É–ø–∏–Ω—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä, —è–∫—â–æ –≤—ñ–Ω –±—É–≤
    this.stop();

    this.element = statusElement; // –ó–∞–ø–∞–º'—è—Ç–æ–≤—É—î–º–æ, –¥–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

    this.timerId = setTimeout(() => {
      if (this.element) {
        this.element.textContent =
          '‚è≥ –°—Ö–æ–∂–µ, —É –≤–∞—Å –ø–æ–≤—ñ–ª—å–Ω–∏–π –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç. –ó–∞—á–µ–∫–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞...';
        this.element.style.color = '#ffc107'; // –ñ–æ–≤—Ç–∏–π –∫–æ–ª—ñ—Ä –¥–ª—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
      }
    }, timeout);
  },

  stop() {
    if (this.timerId) {
      clearTimeout(this.timerId);
      this.timerId = null;
    }
    // –û—á–∏—â—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤–æ–Ω–æ –±—É–ª–æ –ø—Ä–æ –ø–æ–≤—ñ–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç
    if (this.element && this.element.textContent.includes('‚è≥')) {
      this.element.textContent = '';
    }
    this.element = null;
  },
};
// --- –ö–Ü–ù–ï–¶–¨ –ù–û–í–û–ì–û –ë–õ–û–ö–£ ---

const funnelManager = {
  elements: {
    overlay: null,
    modal: null,
    title: null,
    counter: null,
    content: null,
    backBtn: null,
    nextBtn: null,
    statusMsg: null,
  },
  state: {
    currentStepIndex: 0,
    isSubmitting: false,
    registrationData: {},
    countdownTimerId: null,
    funnelSessionId: null,
  },
  steps: [
    {
      id: 'welcome',
      title: '–í—ñ—Ç–∞—î–º–æ —É "Lily&Max sport" ‚ö°Ô∏è',
      fields: [], // –¶–µ–π –∫—Ä–æ–∫ –Ω–µ –∑–±–∏—Ä–∞—î –¥–∞–Ω—ñ
      render: () => `
                <p class="step-description">
                    –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –æ—Ç—Ä–∏–º–∞–π—Ç–µ <strong>–ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω</strong>, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –¥–æ—Å—è–≥—Ç–∏ –≤–∞—à–æ—ó –º–µ—Ç–∏ <strong>–±–µ–∑–ø–µ—á–Ω–æ</strong> —Ç–∞ –≤ <strong>–Ω–∞–π–∫–æ—Ä–æ—Ç—à—ñ —Ç–µ—Ä–º—ñ–Ω–∏</strong>.
                </p>

                <div style="text-align: center; margin-top: 5px; margin-bottom: -10px;">
                    <img src="https://limaxsport.top/registration/2.gif" alt="Welcome Animation" style="max-width: 100%; height: auto; border-radius: 5px;">
                </div>
            `,
      validate: () => {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –Ω—ñ—á–æ–≥–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –ø—Ä–æ—Å—Ç–æ –¥–æ–∑–≤–æ–ª—è—î–º–æ –π—Ç–∏ –¥–∞–ª—ñ
        return true;
      },
    },
    {
      id: 'goal',
      title: '–Ø–∫–∞ –≤–∞—à–∞ –≥–æ–ª–æ–≤–Ω–∞ —Ü—ñ–ª—å?',
      fields: ['goal'],
      render: () => `
                <p class="step-description">–¶–µ –¥–æ–ø–æ–º–æ–∂–µ –Ω–∞–º –∑—Ä–æ–∑—É–º—ñ—Ç–∏ –≤–∞—à—ñ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏ üéØ</p>
                <select id="funnel-goal" class="funnel-input">
                    <option value="" disabled selected>-- –û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É —Ü—ñ–ª—å --</option>
                    <option value="lose weight">–°—Ö—É–¥–Ω—É—Ç–∏</option>
                    <option value="gain muscle mass">–ù–∞–±—Ä–∞—Ç–∏ –º'—è–∑–æ–≤—É –º–∞—Å—É</option>
                    <option value="maintain shape">–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Ñ–æ—Ä–º—É</option>
                </select>
            `,
      validate: (data) => {
        const element = document.getElementById('funnel-goal');
        data.goal = element ? element.value : '';
        if (!data.goal) return '–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≤–∞—à—É —Ü—ñ–ª—å.';
        return true;
      },
    },
    {
      id: 'training_type',
      title: '–î–µ –≤–∏ –ø–ª–∞–Ω—É—î—Ç–µ —Ç—Ä–µ–Ω—É–≤–∞—Ç–∏—Å—å?',
      fields: ['type_of_training'],
      render: () => `
                <p class="step-description">–í–∏–±—ñ—Ä –≤–ø–ª–∏–Ω–µ –Ω–∞ —Ç–∏–ø–∏ –≤–ø—Ä–∞–≤, —è–∫—ñ –≤–∞–º –±—É–¥—É—Ç—å –ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏—Å—è.</p>
                <select id="funnel-type-of-training" class="funnel-input">
                    <option value="" disabled selected>-- –û–±–µ—Ä—ñ—Ç—å –≤–∏–¥ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å --</option>
                    <option value="gym">–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω–æ–º—É –∑–∞–ª—ñ</option>
                    <option value="home">–î–æ–º–∞—à–Ω—ñ —Ç–∞ –≤—É–ª–∏—á–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è</option>
                    <option value="both">–û–±–∏–¥–≤–∞ –≤–∞—Ä—ñ–∞–Ω—Ç–∏</option>
                </select>
            `,
      validate: (data) => {
        const element = document.getElementById('funnel-type-of-training');
        data.type_of_training = element ? element.value : '';
        if (!data.type_of_training) return '–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≤–∏–¥ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.';
        return true;
      },
    },
    {
      id: 'daytime_activity',
      title: '–í–∞—à–∞ —â–æ–¥–µ–Ω–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å',
      fields: ['daytime_activity'],
      render: () => `
                <p class="step-description">–°–∏–¥—è—á–∞ —Ä–æ–±–æ—Ç–∞ —á–∏ –ø–æ—Å—Ç—ñ–π–Ω–∏–π —Ä—É—Ö üî•? - –æ—Ü—ñ–Ω—ñ—Ç—å —Å–≤–æ—é –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –ø–æ–∑–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è–º–∏.</p>
                <select id="funnel-daytime-activity" class="funnel-input">
                    <option value="" disabled selected>-- –û—Ü—ñ–Ω—ñ—Ç—å –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å --</option>
                    <option value="low">–ù–∏–∑—å–∫–∞ (—Å–∏–¥—è—á–∞ —Ä–æ–±–æ—Ç–∞)</option>
                    <option value="average">–°–µ—Ä–µ–¥–Ω—è (–ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ —Ä—É—Ö–∞—é—Å—å)</option>
                    <option value="high">–í–∏—Å–æ–∫–∞ (—Ñ—ñ–∑–∏—á–Ω–∞ —Ä–æ–±–æ—Ç–∞)</option>
                </select>
            `,
      validate: (data) => {
        const element = document.getElementById('funnel-daytime-activity');
        data.daytime_activity = element ? element.value : '';
        if (!data.daytime_activity)
          return '–ë—É–¥—å –ª–∞—Å–∫–∞, –æ—Ü—ñ–Ω—ñ—Ç—å —Å–≤–æ—é —â–æ–¥–µ–Ω–Ω—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å.';
        return true;
      },
    },
    {
      id: 'level_of_training',
      title: '–í–∞—à —Ä—ñ–≤–µ–Ω—å –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏',
      fields: ['level_of_training'],
      render: () => `
                <p class="step-description">–ë—É–¥—å—Ç–µ —á–µ—Å–Ω–∏–º–∏ —ñ–∑ —Å–æ–±–æ—é, —Ü–µ –≤–∞–∂–ª–∏–≤–æ –¥–ª—è –≤–∞—à–æ—ó –±–µ–∑–ø–µ–∫–∏ —Ç–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ üìà</p>
                <select id="funnel-level-of-training" class="funnel-input">
                    <option value="" disabled selected>-- –û–±–µ—Ä—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å --</option>
                    <option value="low">–ù–∏–∑—å–∫–∏–π (–Ω–æ–≤–∞—á–æ–∫)</option>
                    <option value="average">–°–µ—Ä–µ–¥–Ω—ñ–π (–¥–æ—Å–≤—ñ–¥ —î)</option>
                    <option value="high">–í–∏—Å–æ–∫–∏–π (–ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª)</option>
                </select>
            `,
      validate: (data) => {
        const element = document.getElementById('funnel-level-of-training');
        data.level_of_training = element ? element.value : '';
        if (!data.level_of_training)
          return '–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≤–∞—à —Ä—ñ–≤–µ–Ω—å –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏.';
        return true;
      },
    },
    {
      id: 'training_days',
      title: '–ë–∞–∂–∞–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω—å –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å',
      fields: ['training_days_per_week'],
      render: () => `
                <p class="step-description">–¶–µ –¥–æ–ø–æ–º–æ–∂–µ –Ω–∞–º —Å–∫–ª–∞—Å—Ç–∏ –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å —Ç–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è üóìÔ∏è</p>
                <select id="funnel-training-days-per-week" class="funnel-input">
                    <option value="" disabled selected>-- –û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å --</option>
                    <option value="2">2 —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è</option>
                    <option value="3">3 —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è</option>
                    <option value="4">4 —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è</option>
                </select>
            `,
      validate: (data) => {
        const element = document.getElementById(
          'funnel-training-days-per-week'
        );
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ —á–∏—Å–ª–æ, –∞ –Ω–µ —Ä—è–¥–æ–∫
        data.training_days_per_week = element
          ? parseInt(element.value, 10)
          : '';
        if (!data.training_days_per_week)
          return '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å, —Å–∫—ñ–ª—å–∫–∏ —Ä–∞–∑—ñ–≤ –≤–∏ –ø–ª–∞–Ω—É—î—Ç–µ —Ç—Ä–µ–Ω—É–≤–∞—Ç–∏—Å—å.';
        return true;
      },
    },
    {
      id: 'measurements',
      title: '–í–∞—à—ñ –∞–Ω—Ç—Ä–æ–ø–æ–º–µ—Ç—Ä–∏—á–Ω—ñ –¥–∞–Ω—ñ',
      fields: ['age', 'weight', 'height'],
      render: () => `
                <p class="step-description">–¶—ñ –¥–∞–Ω—ñ üìù –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π.</p>
                <label for="funnel-age">–í–∞—à –≤—ñ–∫:</label>
                <input type="number" id="funnel-age" class="funnel-input" placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 28" min="14" max="100">
                <label for="funnel-weight">–í–∞—à–∞ –≤–∞–≥–∞ (–∫–≥):</label>
                <input type="number" id="funnel-weight" class="funnel-input" placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 75.5" step="0.1" min="30" max="250">
                <label for="funnel-height">–í–∞—à –∑—Ä—ñ—Å—Ç (—Å–º):</label>
                <input type="number" id="funnel-height" class="funnel-input" placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 180" min="100" max="250">
            `,
      validate: (data) => {
        const ageEl = document.getElementById('funnel-age');
        const weightEl = document.getElementById('funnel-weight');
        const heightEl = document.getElementById('funnel-height');
        data.age = ageEl ? ageEl.value : '';
        data.weight = weightEl ? weightEl.value : '';
        data.height = heightEl ? heightEl.value : '';
        if (!data.age || !data.weight || !data.height)
          return '–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è.';
        return true;
      },
    },
    {
      id: 'gender',
      title: '–í–∫–∞–∂—ñ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç—å',
      fields: ['gender', 'preferred_exercise_gender'],
      render: () => `
                <p class="step-description">–ú–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ü–µ–π –ø–æ–∫–∞–∑–Ω–∏–∫, —â–æ–± –ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –≤–∞–º –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –Ω–∞–±—ñ—Ä –≤–ø—Ä–∞–≤ (—á–æ–ª–æ–≤—ñ—á–∏–π –∞–±–æ –∂—ñ–Ω–æ—á–∏–π), –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∏ –º–∞—é—Ç—å —Ä—ñ–∑–Ω—É —Å–ø–µ—Ü–∏—Ñ—ñ–∫—É —Ç–∞ –∞–∫—Ü–µ–Ω—Ç–∏.</p>
                <label for="funnel-gender">–í–∞—à–∞ —Å—Ç–∞—Ç—å:</label>
                <select id="funnel-gender" class="funnel-input">
                    <option value="" disabled selected>-- –û–±–µ—Ä—ñ—Ç—å --</option>
                    <option value="male">–ß–æ–ª–æ–≤—ñ—á–∞</option>
                    <option value="female">–ñ—ñ–Ω–æ—á–∞</option>
                    <option value="not_applicable">–ù–µ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è</option>
                </select>
                <div id="funnel-preferred-gender-container" style="display:none; margin-top: 20px;">
                    <label for="funnel-preferred-exercise-gender">–Ø–∫–∏–π –Ω–∞–±—ñ—Ä –≤–ø—Ä–∞–≤ –≤–∞–º –Ω–∞–¥–∞–≤–∞—Ç–∏?</label>
                    <select id="funnel-preferred-exercise-gender" class="funnel-input">
                        <option value="" disabled selected>-- –û–±–µ—Ä—ñ—Ç—å –Ω–∞–±—ñ—Ä --</option>
                        <option value="male">–ß–æ–ª–æ–≤—ñ—á–∏–π –Ω–∞–±—ñ—Ä –≤–ø—Ä–∞–≤</option>
                        <option value="female">–ñ—ñ–Ω–æ—á–∏–π –Ω–∞–±—ñ—Ä –≤–ø—Ä–∞–≤</option>
                    </select>
                </div>
            `,
      onRender: () => {
        const genderSelect = document.getElementById('funnel-gender');
        const preferredContainer = document.getElementById(
          'funnel-preferred-gender-container'
        );
        if (!genderSelect || !preferredContainer) return;
        genderSelect.addEventListener('change', (e) => {
          if (e.target.value === 'not_applicable') {
            preferredContainer.style.display = 'block';
          } else {
            preferredContainer.style.display = 'none';
          }
        });
        if (genderSelect.value === 'not_applicable') {
          preferredContainer.style.display = 'block';
        }
      },
      validate: (data) => {
        const genderEl = document.getElementById('funnel-gender');
        data.gender = genderEl ? genderEl.value : '';
        if (!data.gender) return '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç—å.';

        if (data.gender === 'not_applicable') {
          const preferredGenderEl = document.getElementById(
            'funnel-preferred-exercise-gender'
          );
          data.preferred_exercise_gender = preferredGenderEl
            ? preferredGenderEl.value
            : '';
          if (!data.preferred_exercise_gender)
            return '–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π –Ω–∞–±—ñ—Ä –≤–ø—Ä–∞–≤.';
        } else {
          data.preferred_exercise_gender = null;
        }
        return true;
      },
    },
    {
      id: 'health',
      title: "–ü—Ä–æ–±–ª–µ–º–∏ –∑—ñ –∑–¥–æ—Ä–æ–≤'—è–º",
      subtitle: "(–Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ)",
      fields: ['health_problems', 'other_health_problems'],
      render: () => `
                <p class="step-description">–û–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É, —è–∫—â–æ —î. –¶–µ –¥–æ–∑–≤–æ–ª–∏—Ç—å —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏—Ö –≤–ø—Ä–∞–≤ –¥–ª—è –≤–∞—Å ‚ù§Ô∏è</p>
        
                <div id="funnel-health-problems-list" class="health-problems-list">
                    </div>

                <label for="funnel-other-health-problems" style="margin-top: 15px;">–Ü–Ω—à—ñ –ø—Ä–æ–±–ª–µ–º–∏ (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ):</label>
                <textarea id="funnel-other-health-problems" class="funnel-input" rows="3"></textarea>
            `,
      onRender: () => {
        // –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –Ω–∞—à–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫—É
        renderHealthProblemsChecklist(
          funnelManager.state.registrationData.health_problems || []
        );
      },
      validate: (data) => {
        // –û–ù–û–í–õ–ï–ù–ê –õ–û–ì–Ü–ö–ê: –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ –∑ —á–µ–∫–±–æ–∫—Å—ñ–≤
        const checkedCheckboxes = document.querySelectorAll(
          '#funnel-health-problems-list input[type="checkbox"]:checked'
        );
        data.health_problems = Array.from(checkedCheckboxes).map(
          (checkbox) => checkbox.value
        );

        const otherProblemsEl = document.getElementById(
          'funnel-other-health-problems'
        );
        data.other_health_problems = otherProblemsEl
          ? otherProblemsEl.value.trim()
          : '';
        return true;
      },
    },
    {
      id: 'excluded_exercises',
      title: '–í–∏–∫–ª—é—á–µ–Ω—ñ –≤–ø—Ä–∞–≤–∏',
      subtitle: "(–Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ)",
      fields: ['excluded_exercises'],
      render: () => `
                <p class="step-description">–û–±–µ—Ä—ñ—Ç—å –≤–ø—Ä–∞–≤–∏ üèãÔ∏è, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–ª—é—á–∏—Ç–∏. –ú–∏ –Ω–µ –±—É–¥–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —ó—Ö –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤–∞—à–æ–≥–æ –ø–ª–∞–Ω—É. –í–∏ –∑–º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ü–µ –ø—ñ–∑–Ω—ñ—à–µ –≤ –ø—Ä–æ—Ñ—ñ–ª—ñ, –∞–ª–µ —Ç–æ–¥—ñ –ø–µ—Ä—à–∞ –ø—Ä–æ–≥—Ä–∞–º–∞ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –Ω–µ–±–∞–∂–∞–Ω—ñ –¥–ª—è –≤–∞—Å –≤–ø—Ä–∞–≤–∏.</p>
                <div id="funnel-excluded-exercises-container">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤–ø—Ä–∞–≤...</div>
            `,
      // –ó–ú–Ü–ù–ï–ù–û: –¢–µ–ø–µ—Ä onRender –ø–µ—Ä–µ–¥–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ —É —Ñ—É–Ω–∫—Ü—ñ—é
      onRender: () => {
        funnel_loadAndRenderExcludedExercises(
          funnelManager.state.registrationData.excluded_exercises || []
        );
      },
      validate: (data) => {
        const checkedCheckboxes = document.querySelectorAll(
          '#funnel-excluded-exercises-container input[type="checkbox"]:checked'
        );
        data.excluded_exercises = Array.from(checkedCheckboxes).map(
          (checkbox) => checkbox.value
        );
        return true;
      },
    },
    {
      id: 'full_name',
      title: "–í–∞—à–µ –Ü–º'—è —Ç–∞ –ü—Ä—ñ–∑–≤–∏—â–µ",
      fields: ['full_name'],
      render: () => `
                <p class="step-description">–¶—ñ –¥–∞–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–ª—è –∞–¥–º—ñ–Ω. –ø–∏—Ç–∞–Ω—å, –≤–æ–Ω–∏ –Ω–µ –±—É–¥—É—Ç—å –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏—Å—è —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.</p>
                <input type="text" id="funnel-full-name" class="funnel-input" placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ú–∞–∫—Å–∏–º –í–∞—Å–∏–ª–µ–Ω–∫–æ" required>
            `,
      validate: (data) => {
        const element = document.getElementById('funnel-full-name');
        data.full_name = element ? element.value.trim() : '';
        if (!data.full_name)
          return "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –≤–∞—à–µ –Ü–º'—è —Ç–∞ –ü—Ä—ñ–∑–≤–∏—â–µ.";
        return true;
      },
    },
    {
      id: 'display_name',
      title: "–ü—É–±–ª—ñ—á–Ω–µ —ñ–º'—è –∞–±–æ –ø—Å–µ–≤–¥–æ–Ω—ñ–º",
      subtitle: "(–Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ)",
      fields: ['display_name'],
      render: () => `
                <p class="step-description">–¶–µ —ñ–º'—è –±—É–¥–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏—Å—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö —Ç–∞ —Å–ø—ñ–ª—å–Ω–æ—Ç—ñ. –Ø–∫—â–æ –∑–∞–ª–∏—à–∏—Ç–∏ –ø–æ–ª–µ –ø–æ—Ä–æ–∂–Ω—ñ–º, –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –±—É–¥–µ –∞–Ω–æ–Ω—ñ–º–Ω–∏–º.</p>
                <input type="text" id="funnel-display-name" class="funnel-input" placeholder="–ù–∞–ø—Ä–∏–∫–ª–∞–¥: MaxPower">
            `,
      async validate(data) {
        // <-- –§—É–Ω–∫—Ü—ñ—è —Å—Ç–∞–ª–∞ 'async'
        const element = document.getElementById('funnel-display-name');
        data.display_name = element ? element.value.trim() : '';

        // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤—ñ–≤ —ñ–º'—è, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –π–æ–≥–æ –Ω–∞ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å
        if (data.display_name) {
          try {
            const response = await fetch(`${baseURL}/check-display-name`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ display_name: data.display_name }),
            });
            const result = await response.json();
            if (!response.ok || !result.is_available) {
              return "–¶–µ –ø—É–±–ª—ñ—á–Ω–µ —ñ–º'—è –≤–∂–µ –∑–∞–π–Ω—è—Ç–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –±—É–¥—å –ª–∞—Å–∫–∞ —ñ–Ω—à–µ.";
            }
          } catch (error) {
            return "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—É–±–ª—ñ—á–Ω–µ —ñ–º'—è. –ü–æ–≥–∞–Ω–∏–π –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑–≤'—è–∑–æ–∫.";
          }
        }
        return true; // –Ø–∫—â–æ –ø–æ–ª–µ –ø–æ—Ä–æ–∂–Ω—î –∞–±–æ —ñ–º'—è –¥–æ—Å—Ç—É–ø–Ω–µ
      },
    },
    {
      id: 'socials',
      title: '–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ',
      subtitle: "(–Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ)",
      fields: ['instagram_link', 'telegram_link'],
      render: () => `
                <p class="step-description">–î–æ–¥–∞–π—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, —â–æ–± —ñ–Ω—à—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –º–æ–≥–ª–∏ –∑ –≤–∞–º–∏ –∑–≤'—è–∑–∞—Ç–∏—Å—å üëã</p>
                <label for="funnel-instagram-link">Instagram:</label>
                <input type="text" id="funnel-instagram-link" class="funnel-input" placeholder="–í–∞—à –Ω—ñ–∫–Ω–µ–π–º –∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è">
                <label for="funnel-telegram-link">Telegram:</label>
                <input type="text" id="funnel-telegram-link" class="funnel-input" placeholder="–í–∞—à @username –∞–±–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è">
            `,
      validate: (data) => {
        const instaEl = document.getElementById('funnel-instagram-link');
        const teleEl = document.getElementById('funnel-telegram-link');
        data.instagram_link = instaEl ? instaEl.value.trim() : '';
        data.telegram_link = teleEl ? teleEl.value.trim() : '';
        return true;
      },
    },
    {
      id: 'phone',
      title: '–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É',
      fields: ['phone'],
      render: () => `
                <p class="step-description">–í—ñ–Ω –±—É–¥–µ –≤–∞—à–∏–º –ª–æ–≥—ñ–Ω–æ–º –¥–ª—è –≤—Ö–æ–¥—É –≤ –æ—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç. –î–∞–Ω—ñ –ø–æ–≤–Ω—ñ—Å—Ç—é –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω—ñ ‚úÖ</p>
                <input type="tel" id="funnel-phone" class="funnel-input" placeholder="380 XX XXX XX XX" required>
            `,
      async validate(data) {
        // <-- –§—É–Ω–∫—Ü—ñ—è —Å—Ç–∞–ª–∞ 'async'
        const element = document.getElementById('funnel-phone');
        data.phone = element ? element.value.trim() : '';

        // –°–ø–æ—á–∞—Ç–∫—É –±–∞–∑–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
        if (!data.phone || data.phone.length < 10) {
          return '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.';
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–æ–º–µ—Ä –Ω–∞ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å
        try {
          const response = await fetch(`${baseURL}/check-phone`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ phone: data.phone }),
          });
          const result = await response.json();
          if (!response.ok || !result.is_available) {
            return '–¶–µ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –±—É–¥—å –ª–∞—Å–∫–∞ —ñ–Ω—à–∏–π.';
          }
        } catch (error) {
          return "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–æ–º–µ—Ä. –ü–æ–≥–∞–Ω–∏–π –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑–≤'—è–∑–æ–∫.";
        }
        return true; // –Ø–∫—â–æ –≤—Å–µ –¥–æ–±—Ä–µ
      },
    },
    {
      id: 'password',
      title: '–°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–∞–¥—ñ–π–Ω–∏–π –ø–∞—Ä–æ–ª—å',
      fields: ['password'],
      render: () => `
                <p class="step-description">–ú—ñ–Ω—ñ–º—É–º 8 —Å–∏–º–≤–æ–ª—ñ–≤. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ª—ñ—Ç–µ—Ä–∏ —Ç–∞ —Ü–∏—Ñ—Ä–∏.</p>
                <label for="funnel-password">–ü–∞—Ä–æ–ª—å:</label>
                <input type="password" id="funnel-password" class="funnel-input" minlength="8" required>
                <label for="funnel-password-confirm">–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å:</label>
                <input type="password" id="funnel-password-confirm" class="funnel-input" minlength="8" required>
            `,
      validate: (data) => {
        const pass = document.getElementById('funnel-password').value;
        const confirmPass = document.getElementById(
          'funnel-password-confirm'
        ).value;
        if (pass.length < 8) return '–ü–∞—Ä–æ–ª—å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 8 —Å–∏–º–≤–æ–ª—ñ–≤.';
        if (pass !== confirmPass) return '–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å.';
        data.password = pass;
        return true;
      },
    },
    {
      id: 'email',
      title: '–í–∫–∞–∂—ñ—Ç—å –≤–∞—à email',
      subtitle: "(–Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ)",
      fields: ['email'],
      render: () => `
                <p class="step-description">
                    –ú–æ–∂–ª–∏–≤–æ –≤–∫–∞–∑–∞—Ç–∏ —ñ–Ω—à–∏–º —Ä–∞–∑–æ–º. –ü—Ä–æ—Ç–µ, –∑—Ä–æ–±–∏–≤—à–∏ —Ü–µ –∑–∞—Ä–∞–∑, –≤–∏ –∑–º–æ–∂–µ—Ç–µ <strong>–≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –¥–æ—Å—Ç—É–ø</strong> –¥–æ –∞–∫–∞—É–Ω—Ç—É, —è–∫—â–æ –∑–∞–±—É–¥–µ—Ç–µ –ø–∞—Ä–æ–ª—å. üîë
                </p>
                <input type="email" id="funnel-email" class="funnel-input" placeholder="example@gmail.com">
            `,
      // –ó–≤–µ—Ä–Ω–∏ —É–≤–∞–≥—É, —â–æ —Ñ—É–Ω–∫—Ü—ñ—è async, –±–æ –º–∏ —Ä–æ–±–∏–º–æ –∑–∞–ø–∏—Ç –¥–æ —Å–µ—Ä–≤–µ—Ä–∞
      async validate(data) {
        const element = document.getElementById('funnel-email');
        const email = element ? element.value.trim() : '';
        data.email = email; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ email —É –±—É–¥—å-—è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É

        // –Ø–∫—â–æ –ø–æ–ª–µ –ø–æ—Ä–æ–∂–Ω—î, —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –±–æ –≤–æ–Ω–æ –Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ
        if (!email) {
          return true;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É email –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—ñ
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
          return '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π email.';
        }

        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ
        try {
          const response = await fetch(`${baseURL}/check-email`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email: email }),
          });
          const result = await response.json();
          if (!response.ok || !result.is_available) {
            return '–¶–µ–π email –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π.';
          }
        } catch (error) {
          return "–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ email. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º.";
        }

        // –Ø–∫—â–æ –≤—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω–æ
        return true;
      },
    },
    {
      id: 'confirmation',
      title: '–ú–∞–π–∂–µ –≥–æ—Ç–æ–≤–æ!',
      fields: [], // –¶–µ–π –∫—Ä–æ–∫ –Ω–µ –∑–±–∏—Ä–∞—î –¥–∞–Ω—ñ
      render: () => `
                <p class="step-description">
                    –ß—É–¥–æ–≤–æ! –í–∏ –Ω–∞–¥–∞–ª–∏ –≤—Å—é –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é üéâ
                </p>
                <p class="step-description">
                    –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–≤—ñ–π –∞–∫–∞—É–Ω—Ç —ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä—à–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω‚ú®
                </p>
                <div style="text-align: center; margin-bottom: -10px;">
                    <img 
                        src="https://limaxsport.top/registration/1.gif"
                        alt="–í—ñ—Ç–∞–ª—å–Ω–∞ –∞–Ω—ñ–º–∞—Ü—ñ—è" 
                        style="max-width: 100%; height: auto; border-radius: 5px;"
                    >
                </div>
            `,
      validate: () => {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –Ω—ñ—á–æ–≥–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –ø—Ä–æ—Å—Ç–æ –¥–æ–∑–≤–æ–ª—è—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
        return true;
      },
    },
  ],

  init() {
    this.elements = {
      overlay: document.getElementById('funnel-overlay'),
      modal: document.getElementById('funnel-modal'),
      title: document.getElementById('funnel-step-title'),
      subtitle: document.getElementById('funnel-step-subtitle'),
      content: document.getElementById('funnel-step-content'),
      backBtn: document.getElementById('funnel-back-btn'),
      nextBtn: document.getElementById('funnel-next-btn'),
      statusMsg: document.getElementById('funnel-status-message'),
    };

    if (!this.elements.overlay) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π #funnel-overlay.');
      return;
    }

    this.elements.nextBtn.addEventListener('click', () =>
      this.handleNextStep()
    );
    this.elements.backBtn.addEventListener('click', () =>
      this.handlePrevStep()
    );
  },

  start() {
    if (!this.elements.overlay) return;
    this.state.currentStepIndex = 0;
    this.state.registrationData = {};

    // --- –î–û–î–ê–ù–û: –°—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –¥–ª—è —Ü—ñ—î—ó —Å–µ—Å—ñ—ó –≤–æ—Ä–æ–Ω–∫–∏ ---
    this.state.funnelSessionId =
      typeof crypto.randomUUID === 'function'
        ? crypto.randomUUID()
        : Date.now().toString(36) + Math.random().toString(36).substring(2);
    // --- –ö–Ü–ù–ï–¶–¨ –ó–ú–Ü–ù–ò ---

    this.elements.overlay.style.display = 'flex';
    this.renderCurrentStep();
  },

  hide() {
    if (!this.elements.overlay) return;
    this.elements.overlay.style.display = 'none';
  },

  // –ó–Ω–∞–π–¥–∏ —ñ –∑–∞–º—ñ–Ω–∏ –≤—Å—é —Ñ—É–Ω–∫—Ü—ñ—é renderCurrentStep –Ω–∞ —Ü—é:
  renderCurrentStep() {
    const step = this.steps[this.state.currentStepIndex];
    if (!step) return;

    // --- –î–û–î–ê–ù–û: –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ø–µ—Ä–µ–≥–ª—è–¥—É –∫—Ä–æ–∫—É ---
    trackFunnelEvent(step.id, 'step_view');

    // --- –§—ñ–Ω–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä—É ---
    const fillElement = document.getElementById('funnel-progress-fill');
    if (fillElement) {
      const totalSteps = this.steps.length;
      const currentStepNumber = this.state.currentStepIndex + 1;
      const progressPercentage = (currentStepNumber / totalSteps) * 100;

      // –ü—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —à–∏—Ä–∏–Ω—É. –†–µ—à—Ç—É –∑—Ä–æ–±–∏—Ç—å CSS.
      fillElement.style.width = progressPercentage + '%';
    }
    // --- –ö—ñ–Ω–µ—Ü—å –±–ª–æ–∫—É ---

    // --- –û–ù–û–í–õ–ï–ù–ê –õ–û–ì–Ü–ö–ê –î–õ–Ø –ó–ê–ì–û–õ–û–í–ö–ê –Ü –ü–Ü–î–ó–ê–ì–û–õ–û–í–ö–ê ---
    // –í–∞–∂–ª–∏–≤–æ: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ innerHTML, —â–æ–± –ø—Ä–∞—Ü—é–≤–∞–ª–∏ —Ç–µ–≥–∏, —è–∫—â–æ –≤–æ–Ω–∏ —î
    this.elements.title.innerHTML = step.title;

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —É –∫—Ä–æ–∫—É –ø—ñ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
    if (step.subtitle) {
      this.elements.subtitle.textContent = step.subtitle;
      this.elements.subtitle.style.display = 'block'; // –ü–æ–∫–∞–∑—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç
    } else {
      this.elements.subtitle.textContent = '';
      this.elements.subtitle.style.display = 'none'; // –•–æ–≤–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç
    }
    // --- –ö–Ü–ù–ï–¶–¨ –û–ù–û–í–õ–ï–ù–û–ì–û –ë–õ–û–ö–£ ---

    // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å, —è–∫—â–æ —Ü–µ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∫—Ä–æ–∫
    const isFirstStep = this.state.currentStepIndex === 0;
    const isLastStep = this.state.currentStepIndex === this.steps.length - 1;
    this.elements.modal.classList.toggle('is-first-step', isFirstStep);
    this.elements.modal.classList.toggle('is-final-step', isLastStep);

    const generatedHTML = step.render();
    this.elements.content.innerHTML = generatedHTML;

    if (step.onRender) {
      step.onRender();
    }

    this.elements.backBtn.style.display =
      this.state.currentStepIndex > 0 && !isLastStep ? 'block' : 'none';

    // ‚ñº‚ñº‚ñº –û–ù–û–í–õ–ï–ù–ê –õ–û–ì–Ü–ö–ê –î–õ–Ø –¢–ï–ö–°–¢–£ –ö–ù–û–ü–ö–ò ‚ñº‚ñº‚ñº
    if (isLastStep) {
      this.elements.nextBtn.textContent = '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è';
    } else if (isFirstStep) {
      this.elements.nextBtn.textContent = '–ó—Ä–æ–±–∏–º–æ —Ü–µ! üöÄ';
    } else {
      this.elements.nextBtn.textContent = '–î–∞–ª—ñ';
    }

    step.fields.forEach((field) => {
      const input = document.getElementById(
        `funnel-${field.replace(/_/g, '-')}`
      );
      if (input && this.state.registrationData[field]) {
        input.value = this.state.registrationData[field];
      }
    });
  },

  async handleNextStep() {
    const step = this.steps[this.state.currentStepIndex];

    this.elements.statusMsg.textContent = '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞...';
    this.elements.statusMsg.style.color = '#ccc';
    this.elements.nextBtn.disabled = true;

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞–π–º–µ—Ä. –Ø–∫—â–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞—Ç—è–≥–Ω–µ—Ç—å—Å—è, –∑'—è–≤–∏—Ç—å—Å—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    loadingTimerManager.start(this.elements.statusMsg);

    const validationResult = await step.validate(this.state.registrationData);

    // –ó—É–ø–∏–Ω—è—î–º–æ —Ç–∞–π–º–µ—Ä, –æ—Å–∫—ñ–ª—å–∫–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å
    loadingTimerManager.stop();

    this.elements.nextBtn.disabled = false;

    if (validationResult !== true) {
      this.elements.statusMsg.textContent = validationResult;
      this.elements.statusMsg.style.color = 'red';
      return;
    }

    this.elements.statusMsg.textContent = '';

    if (this.state.currentStepIndex < this.steps.length - 1) {
      this.state.currentStepIndex++;
      this.renderCurrentStep();
    } else {
      this.handleFinalRegistration();
    }
  },

  handlePrevStep() {
    if (this.state.currentStepIndex > 0) {
      // --- –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫—Ä–æ–∫—É ---
      const currentStep = this.steps[this.state.currentStepIndex];
      if (currentStep && typeof currentStep.validate === 'function') {
        // –í–∏–∫–ª–∏–∫–∞—î–º–æ validate, —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ –¥–∞–Ω—ñ, –∞–ª–µ —ñ–≥–Ω–æ—Ä—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø–æ–º–∏–ª–∫—É –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó),
        // –æ—Å–∫—ñ–ª—å–∫–∏ –º–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –Ω–∞–∑–∞–¥, –∞ –Ω–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—Ä–æ–∫.
        currentStep.validate(this.state.registrationData);
      }

      this.state.currentStepIndex--;
      this.renderCurrentStep();
    }
  },

  async handleFinalRegistration() {
    if (this.state.isSubmitting) return;

    this.state.isSubmitting = true;

    // --- –î–û–î–ê–ù–û: –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Å–ø—Ä–æ–±–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó ---
    trackFunnelEvent('confirmation', 'register_attempt');

    const registerBtn = this.elements.nextBtn; // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–æ—Ç–∫—É –∑–º—ñ–Ω–Ω—É –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
    this.elements.nextBtn.disabled = true;
    this.elements.nextBtn.textContent = '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è...';

    this.elements.statusMsg.style.color = 'lightgreen';
    this.elements.statusMsg.textContent = '–°—Ç–≤–æ—Ä—é—î–º–æ –≤–∞—à –∞–∫–∞—É–Ω—Ç —Ç–∞ –ø—Ä–æ—Ñ—ñ–ª—å...';

    try {
      // --- –ö–†–û–ö –ê: –ó–±–∏—Ä–∞—î–º–æ –í–°–Ü –¥–∞–Ω—ñ –≤ –æ–¥–∏–Ω –æ–±'—î–∫—Ç ---
      const rawData = this.state.registrationData;

      const getIntValue = (val) =>
        val && !isNaN(parseInt(val)) ? parseInt(val, 10) : null;
      const getFloatValue = (val) =>
        val && !isNaN(parseFloat(val)) ? parseFloat(val) : null;
      const getStrValue = (val) => (val && val.trim() ? val.trim() : null);
      const getArrayValue = (val) => (val && val.length > 0 ? val : null);

      const combinedDataForAPI = {
        // –î–∞–Ω—ñ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
        phone: getStrValue(rawData.phone),
        password: getStrValue(rawData.password),
        email: getStrValue(rawData.email),

        // –î–∞–Ω—ñ –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é
        full_name: getStrValue(rawData.full_name),
        display_name: getStrValue(rawData.display_name),
        age: getIntValue(rawData.age),
        weight: getFloatValue(rawData.weight),
        height: getIntValue(rawData.height),
        gender: getStrValue(rawData.gender),
        goal: getStrValue(rawData.goal),
        daytime_activity: getStrValue(rawData.daytime_activity),
        type_of_training: getStrValue(rawData.type_of_training),
        level_of_training: getStrValue(rawData.level_of_training),
        training_days_per_week: getIntValue(rawData.training_days_per_week),
        health_problems: getArrayValue(rawData.health_problems),
        other_health_problems: getStrValue(rawData.other_health_problems),
        excluded_exercises: getArrayValue(rawData.excluded_exercises),
        instagram_link: getStrValue(rawData.instagram_link),
        telegram_link: getStrValue(rawData.telegram_link),
        preferred_exercise_gender: getStrValue(
          rawData.preferred_exercise_gender
        ),
      };

      // --- –ö–†–û–ö –ë: –†–æ–±–∏–º–æ –û–î–ò–ù –∑–∞–ø–∏—Ç ---
      const response = await fetch(`${baseURL}/register-self`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(combinedDataForAPI),
      });

      const responseData = await response.json();
      if (!response.ok) {
        // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞, –ø—Ä–æ–∫–∏–¥–∞—î–º–æ —ó—ó –¥–ª—è –±–ª–æ–∫—É catch
        throw new Error(responseData.detail || '–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó');
      }

      // --- –ö–†–û–ö –í: –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ–∫–µ–Ω–∏ –æ–¥—Ä–∞–∑—É, –≤–æ–Ω–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
      setTokens(
        responseData.access_token,
        responseData.refresh_token,
        responseData.expires_in
      );

      localStorage.setItem(
        'newUserJourneyMarker',
        JSON.stringify({ timestamp: Date.now() })
      );

      // –ó–∞–ø—É—Å–∫–∞—î–º–æ –Ω–∞—à –∑–≤–æ—Ä–æ—Ç–Ω–∏–π –≤—ñ–¥–ª—ñ–∫ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
      this.startFinalCountdown(30);
      // –ü–∞—Ä–∞–ª–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –ø–ª–∞–Ω—É
      pollForPlanAndRedirect();
    } catch (error) {
      // –ü–û–ú–ò–õ–ö–ê: –ó—É–ø–∏–Ω—è—î–º–æ –Ω–∞—à —Ç–∞–π–º–µ—Ä –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤—ñ–¥–ª—ñ–∫—É, —è–∫—â–æ –≤—ñ–Ω –±—É–≤ –∑–∞–ø—É—â–µ–Ω–∏–π
      this.clearFinalCountdown();

      const errorMessage = error.message || '–°—Ç–∞–ª–∞—Å—è –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞.';
      let errorHandled = false;

      if (errorMessage.includes('–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É')) {
        const phoneStepIndex = this.steps.findIndex(
          (step) => step.id === 'phone'
        );
        if (phoneStepIndex !== -1) {
          this.state.currentStepIndex = phoneStepIndex;
          this.renderCurrentStep();
          this.elements.statusMsg.textContent = errorMessage;
          this.elements.statusMsg.style.color = 'red';
          errorHandled = true;
        }
      } else if (
        errorMessage.includes("–ü—É–±–ª—ñ—á–Ω–µ —ñ–º'—è") ||
        errorMessage.includes('–ø—Å–µ–≤–¥–æ–Ω—ñ–º')
      ) {
        const displayNameStepIndex = this.steps.findIndex(
          (step) => step.id === 'display_name'
        );
        if (displayNameStepIndex !== -1) {
          this.state.currentStepIndex = displayNameStepIndex;
          this.renderCurrentStep();
          this.elements.statusMsg.textContent = errorMessage;
          this.elements.statusMsg.style.color = 'red';
          errorHandled = true;
        }
      }

      if (!errorHandled) {
        this.elements.statusMsg.style.color = 'red';
        this.elements.statusMsg.textContent = `–ü–æ–º–∏–ª–∫–∞: ${errorMessage}`;
      }

      this.state.isSubmitting = false;
      this.elements.nextBtn.disabled = false;
      this.elements.nextBtn.textContent = '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è';
    }
  },

  /**
   * –ó–∞–ø—É—Å–∫–∞—î –≤—ñ–∑—É–∞–ª—å–Ω–∏–π –∑–≤–æ—Ä–æ—Ç–Ω–∏–π –≤—ñ–¥–ª—ñ–∫ –Ω–∞ –∫–Ω–æ–ø—Ü—ñ —Ç–∞ —É —Å—Ç–∞—Ç—É—Å—ñ.
   * @param {number} duration - –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —É —Å–µ–∫—É–Ω–¥–∞—Ö.
   */
  startFinalCountdown(duration) {
    this.clearFinalCountdown(); // –û—á–∏—â—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä, —è–∫—â–æ –≤—ñ–Ω –±—É–≤

    const registerBtn = this.elements.nextBtn;
    const statusMsg = this.elements.statusMsg;
    let remaining = duration;

    const updateTimer = () => {
      if (remaining <= 0) {
        this.clearFinalCountdown();
        // –¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–∏–≤—Å—è, –∞–ª–µ pollForPlanAndRedirect –ø—Ä–æ–¥–æ–≤–∂—É—î –ø—Ä–∞—Ü—é–≤–∞—Ç–∏
        // (–≤—ñ–Ω –º–∞—î –≤–ª–∞—Å–Ω–∏–π —Ç–∞–π–º–∞—É—Ç –Ω–∞ 100 —Å–µ–∫—É–Ω–¥).
        // –ü—Ä–æ—Å—Ç–æ –∑–∞–ª–∏—à–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è.
        statusMsg.textContent = '–ú–∞–π–∂–µ –≥–æ—Ç–æ–≤–æ, –æ—á—ñ–∫—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å...';
        registerBtn.textContent = '–û—á—ñ–∫—É—î–º–æ...';
      } else {
        statusMsg.textContent = `–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–ª–∞–Ω—É... –ó–∞–ª–∏—à–∏–ª–æ—Å—å: ${remaining} —Å–µ–∫.`;
        registerBtn.textContent = `–ó–∞—á–µ–∫–∞–π—Ç–µ... ${remaining}`;
        remaining--;
      }
    };

    updateTimer(); // –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ–¥—Ä–∞–∑—É, —â–æ–± –Ω–µ —á–µ–∫–∞—Ç–∏ –ø–µ—Ä—à—É —Å–µ–∫—É–Ω–¥—É
    this.state.countdownTimerId = setInterval(updateTimer, 1000);
  },

  /**
   * –ó—É–ø–∏–Ω—è—î —Ç–∞ –æ—á–∏—â—É—î –∞–∫—Ç–∏–≤–Ω–∏–π —Ç–∞–π–º–µ—Ä –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤—ñ–¥–ª—ñ–∫—É.
   */
  clearFinalCountdown() {
    if (this.state.countdownTimerId) {
      clearInterval(this.state.countdownTimerId);
      this.state.countdownTimerId = null;
    }
  },
};

/**
 * –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∑–≥–µ–Ω–µ—Ä—É–≤–∞–≤—Å—è –ø–ª–∞–Ω, —ñ —Ç—ñ–ª—å–∫–∏ –ø–æ—Ç—ñ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î.
 */
function pollForPlanAndRedirect() {
  const statusElement = funnelManager.elements.statusMsg;
  let attempts = 0;
  const maxAttempts = 40; // –ú–∞–∫—Å. —Å–ø—Ä–æ–± (40 * 5 —Å–µ–∫ = 200 —Å–µ–∫—É–Ω–¥)

  const intervalId = setInterval(async () => {
    attempts++;
    if (attempts > maxAttempts) {
      clearInterval(intervalId);
      if (statusElement) {
        statusElement.textContent =
          '–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ—á–µ–∫–∞—Ç–∏—Å—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ...';
      }
      // –í—Å–µ –æ–¥–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –Ω–µ –¥–æ—á–µ–∫–∞–ª–∏—Å—è
      window.location.href =
        'https://limaxsport.com/test/personal_cabinet#plan';
      return;
    }

    try {
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fetchWithAuth, –æ—Å–∫—ñ–ª—å–∫–∏ —Ç–æ–∫–µ–Ω–∏ –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ
      const { data: plans, response } = await fetchWithAuth(
        `${baseURL}/my-workout-plans`
      );

      // –Ø–∫—â–æ –∑–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–∏–π —ñ –º–∞—Å–∏–≤ –ø–ª–∞–Ω—ñ–≤ –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π
      if (response.ok && Array.isArray(plans) && plans.length > 0) {
        clearInterval(intervalId);

        // --- –î–û–î–ê–ù–û: –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –£–°–ü–Ü–®–ù–û–á —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó ---
        trackFunnelEvent('confirmation', 'register_success');

        if (statusElement) {
          statusElement.textContent = '–ü–ª–∞–Ω –≥–æ—Ç–æ–≤–∏–π! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ...';
        }
        setTimeout(() => {
          window.location.href =
            'https://limaxsport.com/test/personal_cabinet#plan';
        }, 1000); // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–±–∞—á–∏–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      }
    } catch (error) {
      // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏, –ø—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ–±—É—î–º–æ —â–µ —Ä–∞–∑
      console.warn(
        `–°–ø—Ä–æ–±–∞ ${attempts}: –ü–ª–∞–Ω —â–µ –Ω–µ –≥–æ—Ç–æ–≤–∏–π –∞–±–æ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É.`
      );
    }
  }, 5000); // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥
}

// –ü—Ä–æ–±–ª–µ–º–∏ –∑—ñ –∑–¥–æ—Ä–æ–≤'—è–º
function renderHealthProblemsChecklist(userSelectedProblems = []) {
  const container = document.getElementById('funnel-health-problems-list');
  if (!container) return;

  container.innerHTML = ''; // –û—á–∏—â—É—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä

  const healthProblems = [
    { value: 'knees', label: '–ö–æ–ª—ñ–Ω–Ω—ñ —Å—É–≥–ª–æ–±–∏' },
    { value: 'spine', label: '–•—Ä–µ–±–µ—Ç (–ø–æ–ø–µ—Ä–µ–∫–æ–≤–∏–π –≤—ñ–¥–¥—ñ–ª)' },
    { value: 'hips', label: '–¢–∞–∑–æ—Å—Ç–µ–≥–Ω–æ–≤—ñ —Å—É–≥–ª–æ–±–∏' },
    { value: 'shoulder', label: '–ü–ª–µ—á–æ–≤—ñ —Å—É–≥–ª–æ–±–∏' },
    { value: 'heart', label: '–°–µ—Ä—Ü–µ–≤–æ-—Å—É–¥–∏–Ω–Ω–∞ —Å–∏—Å—Ç–µ–º–∞' },
    { value: 'breath', label: '–ó–∞—Ö–≤–æ—Ä—é–≤–∞–Ω–Ω—è –¥–∏—Ö–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏' },
  ];

  healthProblems.forEach((problem, index) => {
    const checkboxId = `health-problem-${index}`;

    const labelElement = document.createElement('label');
    labelElement.className = 'health-problem-option';
    labelElement.setAttribute('for', checkboxId);

    const checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.id = checkboxId;
    checkbox.value = problem.value;
    checkbox.checked = userSelectedProblems.includes(problem.value);

    labelElement.appendChild(checkbox);
    labelElement.appendChild(document.createTextNode(` ${problem.label}`));
    container.appendChild(labelElement);
  });

  // --- –ù–û–í–ò–ô –ë–õ–û–ö: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Å—Ç—Ä—ñ–ª–∫–∞ —Å–∫—Ä–æ–ª—É ---
  // –î–∞—î–º–æ –±—Ä–∞—É–∑–µ—Ä—É –º–∏—Ç—å –Ω–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥, —â–æ–± —Ä–æ–∑–º—ñ—Ä–∏ –±—É–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏
  setTimeout(() => {
    if (container.scrollHeight > container.clientHeight) {
      container.classList.add('is-scrollable');
    } else {
      container.classList.remove('is-scrollable');
    }
  }, 100);
}

// –í–∏–∫–ª—é—á–µ–Ω—ñ –≤–ø—Ä–∞–≤–∏
async function funnel_loadAndRenderExcludedExercises(userExcludedNames = []) {
  const container = document.getElementById(
    'funnel-excluded-exercises-container'
  );
  if (!container) return;

  container.innerHTML = '<p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</p>';

  const tempStatusElement = {
    set textContent(value) {
      container.innerHTML = `<p>${value}</p>`;
    },
    get textContent() {
      return container.textContent;
    },
    style: { color: '' },
  };
  loadingTimerManager.start(tempStatusElement);

  try {
    const genderChoice = funnelManager.state.registrationData.gender;
    const preferredGender =
      funnelManager.state.registrationData.preferred_exercise_gender;

    // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è URL
    const params = new URLSearchParams();
    if (genderChoice) {
      params.append('gender', genderChoice);
    }
    if (preferredGender) {
      params.append('preferred_exercise_gender', preferredGender);
    }

    // –Ø–∫—â–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –Ω–µ–º–∞—î, –Ω–µ —Ä–æ–±–∏–º–æ –∑–∞–ø–∏—Ç
    if (!params.toString()) {
      container.innerHTML =
        '<p style="color:orange;">–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –∫—Ä–æ–∫—ñ–≤ —Ç–∞ –∑—Ä–æ–±—ñ—Ç—å –≤–∏–±—ñ—Ä —Å—Ç–∞—Ç—ñ.</p>';
      loadingTimerManager.stop();
      return;
    }

    // –†–æ–±–∏–º–æ –∑–∞–ø–∏—Ç –∑ –Ω–æ–≤–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const { data: exercises, response } = await fetchWithAuth(
      `${baseURL}/self-registration/exercises?${params.toString()}`
    );

    if (!response.ok) {
      throw new Error(
        exercises?.detail || '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤–ø—Ä–∞–≤.'
      );
    }

    // –£—Å–ø—ñ—Ö! –ó—É–ø–∏–Ω—è—î–º–æ —Ç–∞–π–º–µ—Ä, –æ—Å–∫—ñ–ª—å–∫–∏ –¥–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ
    loadingTimerManager.stop();
    container.innerHTML = '';

    if (!exercises || exercises.length === 0) {
      container.innerHTML = '<p>–î–æ—Å—Ç—É–ø–Ω—ñ –≤–ø—Ä–∞–≤–∏ –¥–ª—è –≤–∏–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ.</p>';
      return;
    }

    const userTrainingType =
      funnelManager.state.registrationData.type_of_training;

    let filteredExercises;
    if (userTrainingType === 'home') {
      filteredExercises = exercises.filter(
        (exercise) => exercise.type === 'home' || exercise.type === 'both'
      );
    } else {
      filteredExercises = exercises;
    }

    if (filteredExercises.length === 0) {
      container.innerHTML =
        '<p>–ù–µ–º–∞—î –≤–ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–ª—é—á–µ–Ω–Ω—è, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –≤–∞—à–æ–º—É –≤–∏–±–æ—Ä—É –º—ñ—Å—Ü—è —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.</p>';
      return;
    }

    const sortedExercises = [...filteredExercises].sort((a, b) => {
      const isAExcluded = userExcludedNames.includes(a.name);
      const isBExcluded = userExcludedNames.includes(b.name);
      if (isAExcluded && !isBExcluded) return -1;
      if (!isAExcluded && isBExcluded) return 1;
      return a.name.localeCompare(b.name);
    });

    const searchInput = document.createElement('input');
    searchInput.type = 'search';
    searchInput.placeholder = '–ü–æ—à—É–∫ –≤–ø—Ä–∞–≤–∏... üîç';
    searchInput.className = 'excluded-exercise-search-input';
    container.appendChild(searchInput);

    const listWrapper = document.createElement('div');
    listWrapper.className = 'excluded-exercise-list-wrapper';
    container.appendChild(listWrapper);

    sortedExercises.forEach((exercise, index) => {
      const gifName = exercise.name;
      const checkboxId = `exclude-gif-funnel-${index}`;
      const label = document.createElement('label');
      label.className = 'excluded-exercise-option';
      label.setAttribute('for', checkboxId);
      const checkbox = document.createElement('input');
      checkbox.type = 'checkbox';
      checkbox.id = checkboxId;
      checkbox.value = gifName;
      checkbox.checked = userExcludedNames.includes(gifName);
      label.appendChild(checkbox);
      label.appendChild(document.createTextNode(` ${gifName}`));
      listWrapper.appendChild(label);
    });

    searchInput.addEventListener('input', (event) => {
      const searchTerm = event.target.value.toLowerCase();
      const allLabels = listWrapper.querySelectorAll(
        '.excluded-exercise-option'
      );
      allLabels.forEach((label) => {
        const exerciseName = label.textContent.toLowerCase();
        if (exerciseName.includes(searchTerm)) {
          label.style.display = 'block';
        } else {
          label.style.display = 'none';
        }
      });
    });

    setTimeout(() => {
      if (listWrapper.scrollHeight > listWrapper.clientHeight) {
        listWrapper.classList.add('is-scrollable');
      } else {
        listWrapper.classList.remove('is-scrollable');
      }
    }, 100);
  } catch (error) {
    // –ü–æ–º–∏–ª–∫–∞! –ó—É–ø–∏–Ω—è—î–º–æ —Ç–∞–π–º–µ—Ä —ñ –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
    loadingTimerManager.stop();
    console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–ø—Ä–∞–≤ –¥–ª—è –≤–æ—Ä–æ–Ω–∫–∏:', error);
    container.innerHTML = `<p style="color:red;">–ü–æ–º–∏–ª–∫–∞: ${error.message}</p>`;
  }
}

// --- –ß–ê–°–¢–ò–ù–ê 3: –ù–ê–î–Ü–ô–ù–ò–ô –ó–ê–ü–£–°–ö –õ–û–ì–Ü–ö–ò ---

function initializeFunnel() {
  funnelManager.init();
  funnelManager.start();
}

// –ù–∞–¥—ñ–π–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ DOM
if (
  document.readyState === 'complete' ||
  document.readyState === 'interactive'
) {
  // –Ø–∫—â–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞, –∑–∞–ø—É—Å–∫–∞—î–º–æ –∫–æ–¥ –Ω–µ–≥–∞–π–Ω–æ
  initializeFunnel();
} else {
  // –Ü–Ω–∞–∫—à–µ, —á–µ–∫–∞—î–º–æ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É –ø–æ–¥—ñ—é
  document.addEventListener('DOMContentLoaded', initializeFunnel);
}

/*
// ==========================================================
// === –ö–û–î –î–õ–Ø –ú–û–ë–Ü–õ–¨–ù–û–á –ö–û–ù–°–û–õ–Ü v2.0 (—Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–Ω—ñ–π) ===
// ==========================================================
(function() {
    // –ù–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∫–æ–Ω—Å–æ–ª—å –¥–≤—ñ—á—ñ
    if (document.getElementById('mobile-console-v2')) return;

    // –°—Ç–≤–æ—Ä—é—î–º–æ –≥–æ–ª–æ–≤–Ω–∏–π div
    const consoleDiv = document.createElement('div');
    consoleDiv.id = 'mobile-console-v2';
    document.body.appendChild(consoleDiv);

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ –¥–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ –¥–∏–Ω–∞–º—ñ—á–Ω–æ
    const styles = `
        #mobile-console-v2 {
            position: fixed; bottom: 0; left: 0; width: 100%;
            max-height: 25%; overflow-y: auto; background-color: rgba(0, 0, 0, 0.85);
            border-top: 2px solid #ffc107; color: white; font-family: monospace;
            font-size: 12px; padding: 5px; z-index: 99999; box-sizing: border-box;
            display: flex; flex-direction: column-reverse;
        }
        #mobile-console-v2 pre {
            margin: 2px 0; padding: 3px; white-space: pre-wrap;
            word-break: break-all; border-bottom: 1px solid #444;
        }
        #mobile-console-v2 .log-error { color: #ff8a8a; }
        #mobile-console-v2 .log-warn { color: #ffc107; }
        #mobile-console-v2 .log-info { color: #8ab4f8; }
        #mobile-console-v2 .log-log { color: #e0e0e0; }
    `;
    const styleSheet = document.createElement("style");
    styleSheet.innerText = styles;
    document.head.appendChild(styleSheet);

    function createLogEntry(message, className) {
        const pre = document.createElement('pre');
        pre.className = className;
        pre.textContent = message;
        consoleDiv.prepend(pre);
    }

    // –ü–µ—Ä–µ—Ö–æ–ø–ª—é—î–º–æ console.log —Ç–∞ alert
    const oldLog = console.log;
    console.log = function(...args) {
        oldLog.apply(console, args);
        createLogEntry(`LOG: ${args.join(' ')}`, 'log-log');
    };
    window.alert = function(message) {
        oldLog(`ALERT: ${message}`); // –ü–æ–∫–∞–∑—É—î–º–æ alert –≤ –∑–≤–∏—á–∞–π–Ω—ñ–π –∫–æ–Ω—Å–æ–ª—ñ
        createLogEntry(`ALERT: ${message}`, 'log-info'); // –Ü –≤ –Ω–∞—à—ñ–π –º–æ–±—ñ–ª—å–Ω—ñ–π
    };

    // –Ü–Ω—à—ñ –∫–æ–Ω—Å–æ–ª—å–Ω—ñ –º–µ—Ç–æ–¥–∏
    const oldError = console.error;
    console.error = function(...args) {
        oldError.apply(console, args);
        createLogEntry(`ERROR: ${args.join(' ')}`, 'log-error');
    };
    window.onerror = function(message, source, lineno, colno, error) {
        createLogEntry(`FATAL ERROR: ${message} @ ${source.split('/').pop()}:${lineno}`, 'log-error');
    };
})();
// === –ö–Ü–ù–ï–¶–¨ –ö–û–î–£ –î–õ–Ø –ú–û–ë–Ü–õ–¨–ù–û–á –ö–û–ù–°–û–õ–Ü ===
*/
